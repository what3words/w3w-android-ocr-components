plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'maven-publish'
    id 'jacoco'
    id 'signing'
    id 'org.jetbrains.dokka' version '1.5.0'
}

apply from: 'maven-push.gradle'

android {
    namespace 'com.what3words.ocr.components'
    compileSdk 34

    defaultConfig {
        minSdk 24
        targetSdk 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests.returnDefaultValues = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    jacoco {
        version = "0.8.7"
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.6'
    }
    packagingOptions {
        resources {
            excludes += 'META-INF/LICENSE*'
        }
    }
    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {
    // CameraX
    implementation "androidx.camera:camera-view:$androidx_camera_version"
    implementation "androidx.camera:camera-camera2:$androidx_camera_version"
    implementation "androidx.camera:camera-lifecycle:$androidx_camera_version"
    implementation "androidx.camera:camera-view:$androidx_camera_version"

    // accompanist
    implementation "com.google.accompanist:accompanist-permissions:$accompanist_version"

    // Kotlin
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // MLKit
    compileOnly "com.google.android.gms:play-services-mlkit-text-recognition:$mlkit_core_version"
    compileOnly "com.google.android.gms:play-services-mlkit-text-recognition-chinese:$mlkit_languages_version"
    compileOnly "com.google.android.gms:play-services-mlkit-text-recognition-devanagari:$mlkit_languages_version"
    compileOnly "com.google.android.gms:play-services-mlkit-text-recognition-japanese:$mlkit_languages_version"
    compileOnly "com.google.android.gms:play-services-mlkit-text-recognition-korean:$mlkit_languages_version"

    // what3words
    implementation "com.what3words:w3w-android-api-sdk-bridge:$what3words_android_bridge_version"
    api "com.what3words:w3w-android-wrapper:$what3words_android_wrapper_version"
    api "com.what3words:w3w-android-design-library:$what3words_android_design_version"

    //compose
    implementation platform("androidx.compose:compose-bom:$compose_bom_version")
    implementation "androidx.compose.runtime:runtime"
    implementation "androidx.compose.ui:ui"
    implementation "androidx.activity:activity-compose:$compose_activity_version"
    implementation "androidx.compose.ui:ui-tooling-preview"
    implementation "androidx.constraintlayout:constraintlayout-compose:$compose_constraint_layout_version"
    implementation "androidx.compose.material3:material3"

    // gms for module install
    implementation "com.google.android.gms:play-services-base:$gms_version"

    // Test dependencies
    androidTestImplementation "androidx.test:runner:$test_runner_version"
    androidTestUtil "androidx.test:orchestrator:$orchestrator_version"
    androidTestImplementation "androidx.test.ext:junit:$junit_version"
    androidTestImplementation "io.mockk:mockk-android:$mockk_android_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    androidTestImplementation "com.google.mlkit:text-recognition:$mlkit_languages_version"
    androidTestImplementation "com.google.mlkit:text-recognition-chinese:$mlkit_languages_version"
    androidTestImplementation "com.google.mlkit:text-recognition-devanagari:$mlkit_languages_version"
    androidTestImplementation "com.google.mlkit:text-recognition-japanese:$mlkit_languages_version"
    androidTestImplementation "com.google.mlkit:text-recognition-korean:$mlkit_languages_version"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['createDebugCoverageReport']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = ['android/databinding/**/*.class',
                      '**/*databinding.*',
                      '**/android/databinding/*',
                      '**/androidx/databinding/*',
                      '**/BR.*',
                      '**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      'androidx/**/*.*',
                      'autosuggestsample/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}